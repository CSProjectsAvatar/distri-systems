# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import middleware_pb2 as middleware__pb2


class MiddlewareStub(object):
    """proto for sending files to the server corresponding to the game

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadTournament = channel.unary_unary(
                '/middleware.Middleware/UploadTournament',
                request_serializer=middleware__pb2.TournamentReq.SerializeToString,
                response_deserializer=middleware__pb2.TournamentResp.FromString,
                )
        self.RunTournament = channel.unary_stream(
                '/middleware.Middleware/RunTournament',
                request_serializer=middleware__pb2.RunReq.SerializeToString,
                response_deserializer=middleware__pb2.RunResp.FromString,
                )


class MiddlewareServicer(object):
    """proto for sending files to the server corresponding to the game

    """

    def UploadTournament(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunTournament(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MiddlewareServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadTournament': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadTournament,
                    request_deserializer=middleware__pb2.TournamentReq.FromString,
                    response_serializer=middleware__pb2.TournamentResp.SerializeToString,
            ),
            'RunTournament': grpc.unary_stream_rpc_method_handler(
                    servicer.RunTournament,
                    request_deserializer=middleware__pb2.RunReq.FromString,
                    response_serializer=middleware__pb2.RunResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'middleware.Middleware', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Middleware(object):
    """proto for sending files to the server corresponding to the game

    """

    @staticmethod
    def UploadTournament(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/middleware.Middleware/UploadTournament',
            middleware__pb2.TournamentReq.SerializeToString,
            middleware__pb2.TournamentResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunTournament(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/middleware.Middleware/RunTournament',
            middleware__pb2.RunReq.SerializeToString,
            middleware__pb2.RunResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
