// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1--rc1
// source: middleware.proto

package pb_mid

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	UploadTournament(ctx context.Context, in *TournamentReq, opts ...grpc.CallOption) (*TournamentResp, error)
	GetStats(ctx context.Context, in *StatsReq, opts ...grpc.CallOption) (*StatsResp, error)
	GetAllIds(ctx context.Context, in *AllIdsReq, opts ...grpc.CallOption) (*AllIdsResp, error)
	GetRndStats(ctx context.Context, in *StatsReq, opts ...grpc.CallOption) (*StatsResp, error)
	GetIPs(ctx context.Context, in *IpsReq, opts ...grpc.CallOption) (*IPsResp, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) UploadTournament(ctx context.Context, in *TournamentReq, opts ...grpc.CallOption) (*TournamentResp, error) {
	out := new(TournamentResp)
	err := c.cc.Invoke(ctx, "/pb.Middleware/UploadTournament", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetStats(ctx context.Context, in *StatsReq, opts ...grpc.CallOption) (*StatsResp, error) {
	out := new(StatsResp)
	err := c.cc.Invoke(ctx, "/pb.Middleware/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetAllIds(ctx context.Context, in *AllIdsReq, opts ...grpc.CallOption) (*AllIdsResp, error) {
	out := new(AllIdsResp)
	err := c.cc.Invoke(ctx, "/pb.Middleware/GetAllIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetRndStats(ctx context.Context, in *StatsReq, opts ...grpc.CallOption) (*StatsResp, error) {
	out := new(StatsResp)
	err := c.cc.Invoke(ctx, "/pb.Middleware/GetRndStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetIPs(ctx context.Context, in *IpsReq, opts ...grpc.CallOption) (*IPsResp, error) {
	out := new(IPsResp)
	err := c.cc.Invoke(ctx, "/pb.Middleware/GetIPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	UploadTournament(context.Context, *TournamentReq) (*TournamentResp, error)
	GetStats(context.Context, *StatsReq) (*StatsResp, error)
	GetAllIds(context.Context, *AllIdsReq) (*AllIdsResp, error)
	GetRndStats(context.Context, *StatsReq) (*StatsResp, error)
	GetIPs(context.Context, *IpsReq) (*IPsResp, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) UploadTournament(context.Context, *TournamentReq) (*TournamentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadTournament not implemented")
}
func (UnimplementedMiddlewareServer) GetStats(context.Context, *StatsReq) (*StatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedMiddlewareServer) GetAllIds(context.Context, *AllIdsReq) (*AllIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllIds not implemented")
}
func (UnimplementedMiddlewareServer) GetRndStats(context.Context, *StatsReq) (*StatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRndStats not implemented")
}
func (UnimplementedMiddlewareServer) GetIPs(context.Context, *IpsReq) (*IPsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPs not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_UploadTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TournamentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UploadTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Middleware/UploadTournament",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UploadTournament(ctx, req.(*TournamentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Middleware/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetStats(ctx, req.(*StatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetAllIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetAllIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Middleware/GetAllIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetAllIds(ctx, req.(*AllIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetRndStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetRndStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Middleware/GetRndStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetRndStats(ctx, req.(*StatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetIPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetIPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Middleware/GetIPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetIPs(ctx, req.(*IpsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadTournament",
			Handler:    _Middleware_UploadTournament_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Middleware_GetStats_Handler,
		},
		{
			MethodName: "GetAllIds",
			Handler:    _Middleware_GetAllIds_Handler,
		},
		{
			MethodName: "GetRndStats",
			Handler:    _Middleware_GetRndStats_Handler,
		},
		{
			MethodName: "GetIPs",
			Handler:    _Middleware_GetIPs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "middleware.proto",
}
